// Generated by CoffeeScript 1.7.1
(function() {
  var NeighborhoodView, NeighborhoodsView, Polygon, __,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  __ = {
    mapEvent: function(event, map, callback) {
      return google.maps.event.addListener(map, event, callback);
    }
  };

  window.App = {
    mapOptions: {
      center: {
        lat: 35.790895,
        lng: -78.661153
      },
      zoom: 14,
      streetViewControl: false
    },
    neighborhoods: [],
    init: function() {
      this.map = new google.maps.Map($('#map-canvas').get(0), this.mapOptions);
      this.neighborhoodsView = new NeighborhoodsView({
        el: '#neighborhoods'
      });
      return this.neighborhoodsView.render();
    },
    getMap: function() {
      return this.map;
    },
    startDrawing: function(poly) {
      this.drawing = true;
      return this.map.setOptions({
        draggableCursor: 'crosshair'
      });
    },
    stopDrawing: function() {
      this.drawing = false;
      return this.map.setOptions({
        draggableCursor: null
      });
    },
    clearMap: function() {
      return this.neighborhood.clear();
    },
    logPath: function() {
      return console.log(this.neighborhood.getPath());
    }
  };

  NeighborhoodsView = (function(_super) {
    __extends(NeighborhoodsView, _super);

    function NeighborhoodsView() {
      return NeighborhoodsView.__super__.constructor.apply(this, arguments);
    }

    NeighborhoodsView.prototype.nViews = [];

    NeighborhoodsView.prototype.events = {
      'click #add-neighborhood': 'addNeighborhood'
    };

    NeighborhoodsView.prototype.initialize = function() {
      return this.getNeighborhoods();
    };

    NeighborhoodsView.prototype.render = function() {
      var v, _i, _len, _ref, _results;
      console.log('render list', this.$('.neighborhood-list'));
      this.$('.neighborhood-list').empty();
      _ref = this.nViews;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        v = _ref[_i];
        v.render();
        v.delegateEvents();
        _results.push(this.$('.neighborhood-list').append(v.el));
      }
      return _results;
    };

    NeighborhoodsView.prototype.getNeighborhoods = function() {
      var d, _i, _len, _results;
      console.log("neighborhood ndata", ndata);
      _results = [];
      for (_i = 0, _len = ndata.length; _i < _len; _i++) {
        d = ndata[_i];
        _results.push(this.nViews.push(new NeighborhoodView(d)));
      }
      return _results;
    };

    NeighborhoodsView.prototype.addNeighborhood = function() {
      var n;
      n = new NeighborhoodView({
        name: "New Neighborhood"
      });
      n.on('remove', this.removeView.bind(this));
      this.nViews.push(n);
      return this.render();
    };

    NeighborhoodsView.prototype.removeView = function(view) {
      return this.nViews = _(this.nViews).without(view);
    };

    return NeighborhoodsView;

  })(Backbone.View);

  NeighborhoodView = (function(_super) {
    __extends(NeighborhoodView, _super);

    function NeighborhoodView() {
      return NeighborhoodView.__super__.constructor.apply(this, arguments);
    }

    NeighborhoodView.prototype.tagName = 'li';

    NeighborhoodView.prototype.className = 'neighborhood';

    NeighborhoodView.prototype.template = _.template("<div class=\"name\">\n  <label>Neighborhood Name:</label>\n  <input type=\"text\" name=\"name\" value=\"<%= name %>\"></input>\n</div>\n<div class=\"actions\">\n  <button class=\"edit-poly\">Start Drawing</button>\n  <button class=\"save\">Save Changes</button>\n  <% if(id){ %>\n    <button class=\"delete\">Delete</button>\n  <%} %>\n  <span class=\"status\"></span>\n</div>");

    NeighborhoodView.prototype.events = {
      'click .edit-poly': 'toggleDrawing',
      'click .save': 'save',
      'click .delete': 'delete'
    };

    NeighborhoodView.prototype.initialize = function(opts) {
      if (opts == null) {
        opts = {};
      }
      console.log("init opts", opts);
      this.id = opts.id;
      this.name = opts.name;
      return this.polygon = new Polygon(opts.poly);
    };

    NeighborhoodView.prototype.render = function() {
      this.$el.html(this.template(this));
      return this;
    };

    NeighborhoodView.prototype.toggleDrawing = function() {
      if (this.drawing) {
        return this.stopDrawing();
      } else {
        return this.startDrawing();
      }
    };

    NeighborhoodView.prototype.startDrawing = function() {
      this.drawing = true;
      this.polygon.startEditing();
      return this.$('.edit-poly').text('Stop Drawing');
    };

    NeighborhoodView.prototype.stopDrawing = function() {
      this.drawing = false;
      this.polygon.stopEditing();
      return this.$('.edit-poly').text('Start Drawing');
    };

    NeighborhoodView.prototype.save = function() {
      var payload;
      this.stopDrawing();
      if (!this.polygon.getPath().length) {
        alert("Please draw a shape for this neighborhood before saving");
        return false;
      }
      this.name = this.$('input[name=name]').val();
      payload = {
        name: this.name,
        poly: this.polygon.getPath()
      };
      console.log('save payload', payload);
      if (this.id) {
        return this._update(payload);
      } else {
        return this._create(payload);
      }
    };

    NeighborhoodView.prototype._create = function(payload) {
      return this._saveRequest(payload, {
        url: '/neighborhoods',
        type: 'POST'
      }).done((function(_this) {
        return function(response) {
          _this.id = response.id;
          return _this.render();
        };
      })(this)).fail((function(_this) {
        return function(response) {
          return console.log("create failed", response);
        };
      })(this));
    };

    NeighborhoodView.prototype._update = function(payload) {
      return this._saveRequest(payload, {
        url: "/neighborhoods/" + this.id,
        type: 'PUT'
      }).done((function(_this) {
        return function(response) {
          return _this.render();
        };
      })(this)).fail((function(_this) {
        return function(response) {
          return console.log("update failed", response);
        };
      })(this));
    };

    NeighborhoodView.prototype._saveRequest = function(payload, requestOpts) {
      var baseOpts, opts;
      baseOpts = {
        contentType: 'application/json',
        dataType: 'json',
        data: JSON.stringify(payload)
      };
      opts = _(baseOpts).extend(requestOpts);
      return $.ajax(opts);
    };

    NeighborhoodView.prototype["delete"] = function() {
      return $.ajax({
        url: "/neighborhoods/" + this.id,
        type: "DELETE"
      }).done(this.remove());
    };

    NeighborhoodView.prototype.remove = function() {
      console.log('remove');
      this.stopDrawing();
      this.polygon.clear();
      this.trigger('remove', this);
      return NeighborhoodView.__super__.remove.call(this);
    };

    return NeighborhoodView;

  })(Backbone.View);

  Polygon = (function() {
    Polygon.prototype.polyBase = {
      strokeOpacity: 0.8,
      strokeWeight: 2,
      fillOpacity: 0.35,
      strokeColor: '#000',
      fillColor: '#000'
    };

    Polygon.prototype.polyNormal = {
      editable: false,
      strokeColor: '#000',
      fillColor: '#000'
    };

    Polygon.prototype.polyEditing = {
      editable: true,
      strokeColor: '#FF0000',
      fillColor: '#FF0000'
    };

    function Polygon(data) {
      this.map = App.getMap();
      if (this.gpoly == null) {
        this.gpoly = new google.maps.Polygon(this.polyBase);
      }
      if (data) {
        this.gpoly.setPath(this.parseData(data));
      }
      this.gpoly.setMap(this.map);
    }

    Polygon.prototype.parseData = function(data) {
      return _(data).map(function(c) {
        return new google.maps.LatLng(c[0], c[1]);
      });
    };

    Polygon.prototype.startEditing = function() {
      App.startDrawing();
      this.gpoly.setOptions(this.polyEditing);
      this.leftClick = __.mapEvent('click', this.map, (function(_this) {
        return function(event) {
          return _this.gpoly.getPath().push(event.latLng);
        };
      })(this));
      return this.rightClick = __.mapEvent('rightclick', this.gpoly, (function(_this) {
        return function(event) {
          if (event.vertex) {
            return _this.gpoly.getPath().removeAt(event.vertex);
          }
        };
      })(this));
    };

    Polygon.prototype.stopEditing = function() {
      App.stopDrawing();
      google.maps.event.removeListener(this.leftClick);
      google.maps.event.removeListener(this.rightClick);
      return this.gpoly.setOptions(this.polyNormal);
    };

    Polygon.prototype.getPath = function() {
      var pathArray;
      pathArray = [];
      this.gpoly.getPath().forEach(function(c) {
        return pathArray.push([c.lat(), c.lng()]);
      });
      return pathArray;
    };

    Polygon.prototype.clear = function() {
      return this.gpoly.setMap(null);
    };

    return Polygon;

  })();

  App.init();

}).call(this);
